/*
 * Tiny Vector Matrix Library
 * Dense Vector Matrix Libary of Tiny size using Expression Templates
 *
 * Copyright (C) 2001 - 2007 Olaf Petzold <opetzold@users.sourceforge.net>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * $Id: Eval.h,v 1.13 2007-06-23 15:58:59 opetzold Exp $
 */

#ifndef TVMET_XPR_EVAL_H
#define TVMET_XPR_EVAL_H


#include <gpumatrix/backend/cuda/gpu_declare.h>

namespace gpumatrix {

	template <typename T>
	MatrixConstReference<T> eval(const MatrixConstReference<T> & m) 
	{
		return m;
	}

	template <typename T>
	VectorConstReference<T> eval(const VectorConstReference<T> & m) 
	{
		return m;
	}

	template <typename T, int D>
	ArrayConstReference<T,D> eval(const ArrayConstReference<T,D> & m) 
	{
		return m;
	}


	template <typename E> 
	typename XprResultType<E>:: result_type eval(const E & expr) 
	{
		typename XprResultType<E>::result_type result;

		backend::eval(result,expr,Fcnl_assign<typename E::value_type,typename E::value_type>());

		return result;
		/*if (expr.lhs().cols() != expr.rhs().rows())
			throw runtime_error("Dimension not Match for Matrix Multiplication");

		auto mat1 = expr.lhs().eval();
		auto mat2 = expr.rhs().eval();

		Matrix<value_type> result(m1.rows(),m2.cols());

		cublas_gemm<value_type> ('N', 'N', mat1.rows(), mat2.cols(), mat1.cols(), 1.0, mat1.data(),
			mat1.rows(), mat2.data(), mat2.rows(),
			0, result.data(), mat1.rows());

		return result;*/

	}
	////template <typename E> 
	////typename XprResultType<XprMatrix<E>>:: result_type eval(const XprMatrix<E> & expr) 
	////{
	////	return expr.expr().eval();
	////}


	//template <int D, typename POD,typename E> 
	//Array<typename E::value_type,D> eval(const XprBinOp<Fcnl_mul<POD,typename E::value_type>,XprLiteral< POD >,	XprArray<E,D>> & expr)
	//{
	//	typename XprResultType<E>:: result_type result;

	//	eval_impl::eval(result,expr,Fcnl_assign<E::value_type,E::value_type>());

	//	return result;
	//}

	//Matrix<double> eval(const XprBinOp<Fcnl_mul<int,double>,XprLiteral<int>,	XprMatrix<MatrixConstReference<double>>> & expr)
	//{
	//	Matrix<double> result;

	//	eval_impl::eval(result,expr,Fcnl_assign<double,double>());

	//	return result;
	//}


    
    


} // namespace gpumatrix

#endif // TVMET_XPR_EVAL_H

// Local Variables:
// mode:C++
// tab-width:8
// End:
